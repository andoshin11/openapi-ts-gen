// THIS FILE IS GENERATED BY CODE GENERATOR. DO NOT CHANGE MANUALLY.
/* tslint:disable */
/* eslint-disable */
<%_ if (!helper.isEmpty(schema.properties)) {
      Object.entries(schema.properties).forEach(([_name, _schema]) => { _%>
<%- include('./ref', { name: _name, schema: _schema }) _%>
<%_   })
    };
    if (schema.isRef && schema.type !== name) { _%>
import <%= schema.type %> from "./<%= schema.type _%>";
<%_ }; _%>

<%_ if (schema.isArray) {
      if (schema.isRef) { _%>
type <%= name _%> = <%= schema.type _%>[];
export default <%= name _%>;
<%_   } else if (!helper.isEmpty(schema.properties)) { _%>
export interface <%= name _%>List {
<%_     Object.entries(schema.properties).forEach(([_name, _schema]) => { _%>
<%- include('./property', { name: _name, schema: _schema, helper }) _%>
<%_ }) _%>
}
<%_   };
    } else if (schema.enum.length) {
      // An enum member cannot have a numeric name
      // constain numeric
      if (schema.enum.filter((e) => Number.isFinite(Number(e))).length) { _%>
type <%= name %> = <% schema.enum.forEach((val, index, array) => { _%>
<%_ if (typeof val !== 'string') { _%>
<%= val _%><%_ } else { _%>"<%= val _%>"
<%_ } %><%= (index !== array.length - 1)? '|' : ';'  _%>
<%_ }) _%>
      <%_ } else {
        // only string
_%> enum <%= name _%> {
<%_ schema.enum.forEach((val) => { _%>
  <%= val %> = "<%= val _%>",
<%_ })-%>
}
      <%_ } _%>

export default <%= name _%>
<%_ } else { _%>
export default interface <%= name %> {
<%_ if (!helper.isEmpty(schema.properties)) { _%>
<%_     Object.entries(schema.properties).forEach(([_name, _schema]) => { _%>
  <%- include('./property', { name: _name, schema: _schema, helper }) _%>
<%_ })
   } _%>
}
<%_ } _%>
